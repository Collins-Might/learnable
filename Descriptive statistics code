class DescriptiveStatistics {
  constructor(data) {
    this.data = data;
  }

  calculateMean() {
    return this.data.reduce((acc, value) => acc + value, 0) / this.data.length;
  }

  calculateMedian() {
    const sortedData = [...this.data].sort((a, b) => a - b);
    const mid = Math.floor(sortedData.length / 2);
    return sortedData.length % 2 !== 0 ? sortedData[mid] : (sortedData[mid - 1] + sortedData[mid]) / 2;
  }

  calculateMode() {
    const countMap = new Map();

    this.data.forEach(value => {
      countMap.set(value, (countMap.get(value) || 0) + 1);
    });

    return Array.from(countMap.entries()).reduce((max, entry) => (entry[1] > max[1] ? entry : max))[0];
  }

  calculateRange() {
    const sortedData = [...this.data].sort((a, b) => a - b);
    return sortedData[sortedData.length - 1] - sortedData[0];
  }

  calculateVariance() {
    const mean = this.calculateMean();
    return this.data.reduce((acc, value) => acc + Math.pow(value - mean, 2), 0) / this.data.length;
  }

  calculateStandardDeviation() {
    return Math.sqrt(this.calculateVariance());
  }

  calculateInterquartileRange() {
    const sortedData = [...this.data].sort((a, b) => a - b);
    const lowerQIndex = Math.floor(sortedData.length / 4);
    const upperQIndex = Math.ceil((3 * sortedData.length) / 4);
    const lowerQ = this.calculateMedian(sortedData.slice(0, lowerQIndex));
    const upperQ = this.calculateMedian(sortedData.slice(upperQIndex));
    return upperQ - lowerQ;
  }
}

// Example Usage
const data = [10, 15, 20, 25, 30, 35, 40, 45, 50];
const statsCalculator = new DescriptiveStatistics(data);

console.log("Mean:", statsCalculator.calculateMean());
console.log("Median:", statsCalculator.calculateMedian());
console.log("Mode:", statsCalculator.calculateMode());

console.log("Range:", statsCalculator.calculateRange());
console.log("Variance:", statsCalculator.calculateVariance());
console.log("Standard Deviation:", statsCalculator.calculateStandardDeviation());
console.log("Interquartile Range:", statsCalculator.calculateInterquartileRange());
